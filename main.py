import telebot
from telebot import types
import emoji
from random import randrange, choice


class FieldPart(object):
    main = 'map'
    radar = 'radar'
    weight = 'weight'


class InputTypes(object):
    ship_setup = 0
    shot = 1
    other = 2
    waiting = 3


class Cell(object):
    empty_cell = emoji.emojize(':water_wave:')
    ship_cell = emoji.emojize(':passenger_ship:')
    destroyed_ship = emoji.emojize(':skull:')
    damaged_ship = emoji.emojize(':fire:')
    miss_cell = emoji.emojize(':sweat_droplets:')


# –ü–æ–ª–µ –∏–≥—Ä—ã —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π: –∫–∞—Ä—Ç–∞, –≥–¥–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ—Ä–∞–±–ª–∏ –∏–≥—Ä–æ–∫–∞;
# —Ä–∞–¥–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–≥—Ä–æ–∫ –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–∏ —Ö–æ–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–æ–≤;
# –ø–æ–ª–µ —Å –≤–µ—Å–æ–º –∫–ª–µ—Ç–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö–æ–¥–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞)
class Field(object):

    def __init__(self, size):
        self.size = size
        self.map = [[Cell.empty_cell for _ in range(size)] for _ in range(size)]
        self.radar = [[Cell.empty_cell for _ in range(size)] for _ in range(size)]
        self.weight = [[1 for _ in range(size)] for _ in range(size)]

    def get_field_part(self, element):
        if element == FieldPart.main:
            return self.map
        if element == FieldPart.radar:
            return self.radar
        if element == FieldPart.weight:
            return self.weight

    # –†–∏—Å—É–µ–º –ø–æ–ª–µ. –ó–¥–µ—Å—å –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ–ª–∏—Çc—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏. —Ç.–∫. –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –∫–ª–µ—Ç–æ–∫ –∏–¥—ë—Ç –ø–æ –¥—Ä—É–≥–æ–º—É
    def draw_field(self, element):
        field = self.get_field_part(element)
        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–∫–≤
        # letters = "  üÑ∞  üÑ±  üÑ≤  üÑ≥  üÑ¥  üÑµ  üÑ∂  üÑ∑  üÑ∏  üÑπ"
        letters = '\U0001f1e6 ' + '\U0001f1e7 ' + '\U0001f1e8 ' + '\U0001f1e9 ' + '\U0001f1eA ' + \
                  '\U0001f1eB ' + '\U0001f1eC ' + '\U0001f1eD ' + '\U0001f1eE ' + '\U0001f1eF '

        field_message = emoji.emojize(':triangular_flag:') + letters[0:self.size * 2] + '\n'
        for x in range(0, self.size):
            field_message += emoji.emojize(':keycap_' + str(x + 1) + ':')
            for y in range(0, self.size):
                field_message += " " + str(field[x][y])
            field_message += '\n'
        field_message += '\n'
        return field_message

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è.
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –∏ True –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ–º–µ—â–∞–µ—Ç—Å—è
    def check_ship_fits(self, ship, element):

        field = self.get_field_part(element)

        if ship.x + ship.height - 1 >= self.size or ship.x < 0 or \
                ship.y + ship.width - 1 >= self.size or ship.y < 0:
            return False

        x = ship.x
        y = ship.y
        width = ship.width
        height = ship.height

        for p_x in range(x, x + height):
            for p_y in range(y, y + width):
                if str(field[p_x][p_y]) == Cell.miss_cell:
                    return False

        for p_x in range(x - 1, x + height + 1):
            for p_y in range(y - 1, y + width + 1):
                if p_x < 0 or p_x >= len(field) or p_y < 0 or p_y >= len(field):
                    continue
                if str(field[p_x][p_y]) in (Cell.ship_cell, Cell.destroyed_ship):
                    return False

        return True

    # –ö–æ–≥–¥–∞ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã–º–∏ (Cell.miss_cell)
    # –∞ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è - —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–º–∏ (Cell.destroyed_ship). –¢–∞–∫ –∏ –¥–µ–ª–∞–µ–º, —Ç–æ–ª—å–∫–æ –≤ –¥–≤–∞ –ø–æ–¥—Ö–æ–¥–∞.
    def mark_destroyed_ship(self, ship, element):

        field = self.get_field_part(element)

        x, y = ship.x, ship.y
        width, height = ship.width, ship.height

        for p_x in range(x - 1, x + height + 1):
            for p_y in range(y - 1, y + width + 1):
                if p_x < 0 or p_x >= len(field) or p_y < 0 or p_y >= len(field):
                    continue
                field[p_x][p_y] = Cell.miss_cell

        for p_x in range(x, x + height):
            for p_y in range(y, y + width):
                field[p_x][p_y] = Cell.destroyed_ship

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è: –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ö —É –∫–æ—Ä–∞–±–ª—è –ø–æ –µ–≥–æ –≤—ã—Å–æ—Ç–µ –∏ —à–∏—Ä–∏–Ω–µ –∏ –ø–æ–º–µ—á–∞–µ–º –Ω–∞ –ø–æ–ª–µ —ç—Ç–∏ –∫–ª–µ—Ç–∫–∏
    # –ø–∞—Ä–∞–º–µ—Ç—Ä element - —Å—é–¥–∞ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –∫ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –ø–æ–ª—è –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è: –æ—Å–Ω–æ–≤–Ω–∞—è, —Ä–∞–¥–∞—Ä –∏–ª–∏ –≤–µ—Å
    def add_ship_to_field(self, ship, element):

        field = self.get_field_part(element)

        x, y = ship.x, ship.y
        width, height = ship.width, ship.height

        for p_x in range(x, x + height):
            for p_y in range(y, y + width):
                # –í –∫–ª–µ—Ç–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–∞–±–ª—å (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ HP)
                field[p_x][p_y] = ship

    # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    def get_max_weight_cells(self):
        weights = {}
        max_weight = 0
        # –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –∫–ª–µ—Ç–∫–∞–º –∏ –∑–∞–Ω–æ—Å–∏–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º
        # –î–∞–ª–µ–µ –±–µ—Ä—ë–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —ç—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º weights[max_weight]
        for x in range(self.size):
            for y in range(self.size):
                if self.weight[x][y] > max_weight:
                    max_weight = self.weight[x][y]
                weights.setdefault(self.weight[x][y], []).append((x, y))

        return weights[max_weight]

    # –ø–µ—Ä–µ—Å—á–µ—Ç –≤–µ—Å–∞ –∫–ª–µ—Ç–æ–∫
    def recalculate_weight_map(self, available_ships):
        # –î–ª—è –Ω–∞—á–∞–ª–∞ –º—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–µ—Ç–∫–∞–º 1 (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        self.weight = [[1 for _ in range(self.size)] for _ in range(self.size)]

        # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–Ω–µ–Ω—ã–π –∫–æ—Ä–∞–±–ª—å - —Å—Ç–∞–≤–∏–º –∫–ª–µ—Ç–∫–∞–º –≤—ã—à–µ –Ω–∏–∂–µ –∏ –ø–æ –±–æ–∫–∞–º
        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ 50. –ü–æ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º –æ—Ç —Ä–∞–Ω–µ–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–ª–∏
        for x in range(self.size):
            for y in range(self.size):
                if self.radar[x][y] == Cell.damaged_ship:

                    self.weight[x][y] = 0

                    if x - 1 >= 0:
                        if y - 1 >= 0:
                            self.weight[x - 1][y - 1] = 0
                        self.weight[x - 1][y] *= 50
                        if y + 1 < self.size:
                            self.weight[x - 1][y + 1] = 0

                    if y - 1 >= 0:
                        self.weight[x][y - 1] *= 50
                    if y + 1 < self.size:
                        self.weight[x][y + 1] *= 50

                    if x + 1 < self.size:
                        if y - 1 >= 0:
                            self.weight[x + 1][y - 1] = 0
                        self.weight[x + 1][y] *= 50
                        if y + 1 < self.size:
                            self.weight[x + 1][y + 1] = 0

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
        # –ï—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–ª–µ—Ç–∫–µ –ø–æ–ª—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–µ –≤–µ—Å –Ω–∞ 1

        for ship_size in available_ships:
            # –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
            ship_vert = Ship(ship_size, 1, 1, True)
            ship_hor = Ship(ship_size, 1, 1, False)
            for x in range(self.size):
                for y in range(self.size):
                    if self.radar[x][y] in (Cell.destroyed_ship, Cell.damaged_ship, Cell.miss_cell) \
                            or self.weight[x][y] == 0:
                        self.weight[x][y] = 0
                        continue
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–∞–±–ª—å –≤ —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É
                    ship_vert.set_position(x, y, True)
                    ship_hor.set_position(x, y, False)
                    # –ü–æ –≤—Å–µ–π –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ä–∞–±–ª—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å
                    if self.check_ship_fits(ship_vert, FieldPart.radar):
                        for i in range(ship_size):
                            self.weight[x + i][y] += 1
                    if self.check_ship_fits(ship_hor, FieldPart.radar):
                        for i in range(ship_size):
                            self.weight[x][y + i] += 1


class Game(object):
    letters = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
    # letters = ("A", "B", "C", "D")
    ships_rules = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
    # ships_rules = [1,2]
    field_size = len(letters)
    input_type = InputTypes.other

    def __init__(self):

        self.players = []
        self.current_player = None
        self.next_player = None
        self.input_type = InputTypes.other
        self.status = 'prepare'

    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    def start_game(self):
        self.current_player = self.players[0]
        self.next_player = self.players[1]

    # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    def status_check(self):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å prepare –Ω–∞ in game –µ—Å–ª–∏ –≤ –∏–≥—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞.
        if self.status == 'prepare' and len(self.players) >= 2:
            self.status = 'in game'
            self.start_game()
            return True
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å—Ç–∞—Ç—É—Å –≤ "game over" –µ—Å–ª–∏ —É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å 0 –∫–æ—Ä–∞–±–ª–µ–π.
        if self.status == 'in game' and len(self.next_player.ships) == 0:
            self.status = 'game over'
            return True

    def add_player(self, player):
        # –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ –ø–æ–ª–µ
        player.field = Field(Game.field_size)
        player.enemy_ships = list(Game.ships_rules)
        # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ—Ä–∞–±–ª–∏
        self.ships_setup(player)
        # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –¥–ª—è –∫–ª–µ—Ç–æ–∫ –ø–æ–ª—è (—ç—Ç–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ò–ò)
        player.field.recalculate_weight_map(player.enemy_ships)
        self.players.append(player)

    def ships_setup(self, player):
        # –î–µ–ª–∞–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∑–∞–¥–∞–Ω–Ω—ã–º –≤ –∫–ª–∞—Å—Å–µ Game
        for ship_size in Game.ships_rules:
            # –ó–∞–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∫–æ–≥–¥–∞ –¥–ª—è –∫–æ—Ä–∞–±–ª—è –æ—Å—Ç–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –º–∞–ª–æ –º–µ—Å—Ç–∞
            retry_count = 30
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–∞–±–ª—å-–±–æ–ª–≤–∞–Ω–∫—É –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            ship = Ship(ship_size, 0, 0, True)

            while True:
                x, y, r = player.get_input('ship_setup')
                ship.set_position(x, y, r)

                # –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –Ω–∞ –ø–æ–ª–µ –∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª—å
                if player.field.check_ship_fits(ship, FieldPart.main):
                    player.field.add_ship_to_field(ship, FieldPart.main)
                    player.ships.append(ship)
                    break

                # –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è. –ø–∏—à–µ–º, –æ—Ç–Ω–∏–º–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É
                retry_count -= 1
                if retry_count < 0:
                    # –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ - –æ–±–Ω—É–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
                    player.field.map = [[Cell.empty_cell for _ in range(Game.field_size)] for _ in
                                        range(Game.field_size)]
                    player.ships = []
                    self.ships_setup(player)
                    return True

    def draw(self):
        field = self.current_player.field.draw_field(FieldPart.main)
        radar = self.current_player.field.draw_field(FieldPart.radar)
        return field, radar

    def switch_players(self):
        self.current_player, self.next_player = self.next_player, self.current_player


class Player(object):

    def __init__(self, name, is_ai, skill, auto_ship):
        self.name = name
        self.is_ai = is_ai
        self.auto_ship_setup = auto_ship
        self.skill = skill
        self.ships = []
        self.enemy_ships = []
        self.field = None

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    def get_input(self, input_type):

        if input_type == "ship_setup":
            user_input = str(choice(Game.letters)) + str(randrange(0, self.field.size)) + choice(["H", "V"])
            x, y, r = user_input[0], user_input[1:-1], user_input[-1]

            return Game.letters.index(x), int(y) - 1, False if r == 'H' else True

        if input_type == "shot":
            if self.is_ai:
                if self.skill == 1:
                    x, y = choice(self.field.get_max_weight_cells())
                if self.skill == 0:
                    x, y = randrange(0, self.field.size), randrange(0, self.field.size)
            else:
                pass
            return \
                x, y

    # –ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã—Å—Ç—Ä–µ–ª–∞ –º—ã –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∏–ø–æ–º shot
    def make_shot(self, target_player, x, y):

        if self.is_ai:
            x, y = choice(self.field.get_max_weight_cells())
        sx, sy = x, y

        shot_res = target_player.receive_shot((sx, sy))

        if shot_res == 'miss':
            self.field.radar[sx][sy] = Cell.miss_cell

        if shot_res == 'get':
            self.field.radar[sx][sy] = Cell.damaged_ship

        if type(shot_res) == Ship:
            destroyed_ship = shot_res
            self.field.mark_destroyed_ship(destroyed_ship, FieldPart.radar)
            self.enemy_ships.remove(destroyed_ship.size)
            shot_res = 'kill'

        # –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—É –≤–µ—Å–æ–≤
        self.field.recalculate_weight_map(self.enemy_ships)

        return shot_res

    # –ò–≥—Ä–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    # –ø–æ–ø–∞–ª (return "get") –ø—Ä–æ–º–∞–∑–∞–ª (return "miss") –∏–ª–∏ —É–±–∏–ª –∫–æ—Ä–∞–±–ª—å (—Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å)
    def receive_shot(self, shot):

        sx, sy = shot

        if type(self.field.map[sx][sy]) == Ship:
            ship = self.field.map[sx][sy]
            ship.hp -= 1

            if ship.hp <= 0:
                self.field.mark_destroyed_ship(ship, FieldPart.main)
                self.ships.remove(ship)
                return ship

            self.field.map[sx][sy] = Cell.damaged_ship
            return 'get'

        else:
            self.field.map[sx][sy] = Cell.miss_cell
            return 'miss'


class Ship:

    def __init__(self, size, x, y, is_vert):
        self.size = size
        self.hp = size
        self.x = x
        self.y = y
        self.is_vert = is_vert
        self.set_rotation(is_vert)

    def __str__(self):
        return Cell.ship_cell

    def set_position(self, x, y, is_vert):
        self.x = x
        self.y = y
        self.set_rotation(is_vert)

    def set_rotation(self, is_vert):
        if is_vert:
            self.height, self.width = self.size, 1
        else:
            self.height, self.width = 1, self.size


# –ó–¥–µ—Å—å –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞

chatVariables = {}
bot = telebot.TeleBot('6214557143:AAF9wrgPduSyDvYCJrmiaizbiahJwbDPem4')
players = []


@bot.message_handler(commands=['start'])
def start(message):
    game = Game()
    chatVariables[message.chat.id] = game
    hello_mess = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>'
    enter_game_mess = f'–ù–∏–∫—Ç–æ –∏–∑ –¥—Ä—É–∑–µ–π –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –∏–∑-–∑–∞ —Å–µ—Å—Å–∏–∏?' \
                      f'' \
                      f' –¢–æ–≥–¥–∞ —Ç—ã –ø–æ–ø–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ç—Å—Ç–≤–æ.'
    enter_game_mess += emoji.emojize(':magic_wand:')

    bot.send_message(message.chat.id, hello_mess, parse_mode='html')
    bot.send_message(message.chat.id, enter_game_mess)

    markup = types.ReplyKeyboardMarkup()
    Start = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
    Help = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.add(Start, Help)
    bot.send_message(message.chat.id,
                     '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å", –∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–æ–¥–∞ - "–ü–æ–º–æ—â—å"\n'
                     '–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –≤–≤–µ–¥–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"',
                     parse_mode='html',
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.chat.id not in chatVariables.keys():
        bot.send_message(message.chat.id, "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        return
    elif message.text == '–ü–æ–º–æ—â—å':
        help_mes = '–¶–µ–ª—å –∏–≥—Ä—ã - "–ø–æ—Ç–æ–ø–∏—Ç—å" –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏\n' \
                   '–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–≤–∞–¥—Ä–∞—Ç 10x10, —Å—Ç–æ–ª–±—Ü—ã –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, ' \
                   '–∞ —Å—Ç—Ä–æ–∫–∏ - —á–∏—Å–ª–∞–º–∏.\n' \
                   '–ù–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Ö–∞–æ—Ç–∏—á–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–æ—Ä–∞–±–ª–∏: 4 –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã—Ö, 3 –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã—Ö, 2 —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã—Ö –∏ 1 ' \
                   '—á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π (—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏). \n' \
                   '–ö–æ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤—ã—Å—Ç—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: –∑–∞–≥–ª–∞–≤–Ω–∞—è –ª–∞—Ç–∏–Ω—Å–∫–∞—è ' \
                   '–±—É–∫–≤–∞ –æ—Ç A –¥–æ J + —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –Ω–∞–ø—Ä–∏–º–µ—Ä, A2 –∏–ª–∏ C4. '
        bot.send_message(message.chat.id, help_mes)
        return
    current_game = chatVariables[message.chat.id]
    if current_game.input_type == InputTypes.other:
        if message.text == '–ù–∞—á–∞—Ç—å':
            current_game = Game()
            chatVariables[message.chat.id] = current_game
            current_game.add_player(Player(name=message.from_user.first_name, is_ai=False, auto_ship=True, skill=1))
            current_game.add_player(Player(name='SkyNet', is_ai=True, auto_ship=True, skill=1))
            current_game.status_check()
            field, radar = current_game.draw()
            markup = types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id, '–í–∞—à —Ñ–ª–æ—Ç\n' + field, parse_mode='html', reply_markup=markup)
            bot.send_message(message.chat.id, '–†–∞–¥–∞—Ä\n' + radar)
            current_game.input_type = InputTypes.shot
    elif current_game.input_type == InputTypes.shot:
        current_game.input_type = InputTypes.waiting
        if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å':
            current_game.input_type = InputTypes.other
            current_game.status = 'game over'
        else:
            user_input = message.text.upper().replace(" ", "")
            x, y = user_input[0].upper(), user_input[1:]
            current_game.input_type = InputTypes.waiting
            if x not in Game.letters or not y.isdigit() or int(y) not in range(1, Game.field_size + 1):
                bot.send_message(message.chat.id, '–ü—Ä–∏–∫–∞–∑ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ!')
            elif current_game.current_player.field.get_field_part(FieldPart.radar)[int(y) - 1][
                Game.letters.index(x)] != Cell.empty_cell:
                bot.send_message(message.chat.id, '–ö–≤–∞–¥—Ä–∞—Ç —É–∂–µ –æ–±—Å—Ç—Ä–µ–ª—è–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ!')
            else:
                y, x = Game.letters.index(x), int(y) - 1
                shot_result = current_game.current_player.make_shot(current_game.next_player, x, y)
                if shot_result == 'miss':
                    bot.send_message(message.chat.id, '–ü—Ä–æ–º–∞—Ö!')
                    current_game.switch_players()
                    shot_result = ''
                    while shot_result != 'miss':
                        bot.send_message(message.chat.id, '–•–æ–¥ –≤–∞—à–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...')
                        shot_result = current_game.current_player.make_shot(current_game.next_player, 1, 1)
                        if shot_result == 'miss':
                            bot.send_message(message.chat.id, current_game.current_player.name + ' –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!')
                        elif shot_result == 'get':
                            bot.send_message(message.chat.id, '–ù–∞—à –∫–æ—Ä–∞–±–ª—å –ø–æ–ø–∞–ª –ø–æ–¥ –æ–±—Å—Ç—Ä–µ–ª!')
                        elif shot_result == 'kill':
                            bot.send_message(message.chat.id, '–ù–∞—à –∫–æ—Ä–∞–±–ª—å –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω!')
                            current_game.status_check()
                            if current_game.status == 'game over':
                                reply = '–≠—Ç–æ –±—ã–ª –Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä–∞–±–ª—å!\n' + current_game.current_player.name + ' –ø–æ–±–µ–¥–∏–ª'
                                bot.send_message(message.chat.id, reply)
                                shot_result = 'miss'
                    current_game.switch_players()
                elif shot_result == 'get':
                    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!')
                elif shot_result == 'kill':
                    bot.send_message(message.chat.id, '–ö–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!')
                    current_game.status_check()
                    if current_game.status == 'game over':
                        bot.send_message(message.chat.id,
                                         '–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫–∞–ø–∏—Ç–∞–Ω!\n' + current_game.next_player.name + ' –ø–æ–≤–µ—Ä–∂–µ–Ω')
            field, radar = current_game.draw()
            bot.send_message(message.chat.id, '–í–∞—à —Ñ–ª–æ—Ç\n' + field)
            bot.send_message(message.chat.id, '–†–∞–¥–∞—Ä\n' + radar)
        if current_game.status == 'game over':
            current_game.input_type = InputTypes.other
            markup = types.ReplyKeyboardMarkup()
            retry = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
            markup.add(retry)
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å"',
                             parse_mode='html', reply_markup=markup)
        else:
            current_game.input_type = InputTypes.shot
    elif current_game.input_type == InputTypes.ship_setup:
        pass

    elif current_game.input_type == InputTypes.waiting:
        reply = "–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏"
        bot.send_message(message.chat.id, reply)


bot.polling(none_stop=True)
